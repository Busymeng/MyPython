#############################################################################
##  More Python Module and Tips
#############################################################################

#############################################################################
##  Deque 
##---------------------------------------------------------------------------
"""
   * Two-way queue
   * It can be used to implement stack and queue
   * It's in the collections module
"""


##  deque rotate  --> end move to front



##############################################################################
##  Heap 
##----------------------------------------------------------------------------
"""
   * Using the heapq module
"""





##############################################################################
##  Collections module: ChainMap 
##----------------------------------------------------------------------------
"""
   * Link multiple dictionaries.
   * Same key dictionary - The one in the front has higher priority
"""



##----------------------------------------------------------------------------

    
    
##----------------------------------------------------------------------------


    

##############################################################################
##  Collections module: Counter 
##----------------------------------------------------------------------------
"""
   * It can count the frequency of the elemnts in a collection.
   * Counter is a special dict, the keys are the elemnts and the values are
     the frequency of the element.
"""



    
##  Counter methods    
"""
   * elements(): return an iterator contains all elements
   * most_common([n]): return the most n elements
   * subtract([iterable-or-mapping]): compute the updated frequencies of 
     elements after subtraction.
"""    

    
    
##  Other Counter operations    




##############################################################################
##  itertools module
##----------------------------------------------------------------------------



##  Infinite iterators
"""
   * count(start,[step])
     - The count iterator will return evenly spaced values starting with the 
       number you pass in as its start parameter. 
     - count also accepts a step parameter. 
     - The next value generated by the iterator is the current value plus 
       the step value.
       
   * cycle(p)
     - The cycle iterator from itertools allows you to create an iterator 
       that will cycle through a series of values infinitely.
       
   * repeat(elem[,n])
     - The repeat iterator will return an object over and over again forever 
       unless you set its times argument. 
     - It is quite similar to cycle except that it doesn’t cycle over a set 
       of values repeatedly. 
"""

  
    
##----------------------------------------------------------------------------



##----------------------------------------------------------------------------


##############################################################################
##  Other methods in itertools module
##----------------------------------------------------------------------------
"""
   * accumulate(p[,func])
     - The count iterator will return evenly spaced values starting with the 
       number you pass in as its start parameter. 
     - count also accepts a step parameter. 
     - The next value generated by the iterator is the current value plus 
       the step value.
       
   * chain(p,q,...)
     - The cycle iterator from itertools allows you to create an iterator 
       that will cycle through a series of values infinitely.
       
   * repeat(elem[,n])
     - The repeat iterator will return an object over and over again forever 
       unless you set its times argument. 
     - It is quite similar to cycle except that it doesn’t cycle over a set 
       of values repeatedly. 
"""


# Amortize a 5% loan of 1000 with 4 annual payments of 90



# Chaotic recurrence relation https://en.wikipedia.org/wiki/Logistic_map


##---------------------------------------------------------------------------   

    
    
##---------------------------------------------------------------------------



##---------------------------------------------------------------------------

    
##---------------------------------------------------------------------------

    
##---------------------------------------------------------------------------

    
##---------------------------------------------------------------------------

    
##---------------------------------------------------------------------------

    
##############################################################################
##  itertools module: Methods for combination and permutation
##----------------------------------------------------------------------------
"""
   * product(p,q,...[repeat=1])
       
   * permutations(p[,r])
       
   * combinations(p,r)
   
   * combinations_with_replacement(p,r)
"""    

